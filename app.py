import streamlit as st

# 캐릭터 매칭 기준
character_map = {
    "ENFP": "피카츄 - 열정적인 모험가",
    "ESTP": "지우 - 에너지 넘치는 리더",
    "ISTJ": "이슬이 - 논리적 전략가",
    "ISFJ": "웅 - 자상한 지원자",
    "ENTP": "로켓단 - 창의적인 아이디어 제조기",
}

# 질문 및 답변
questions = [
    ("새로운 환경에서 당신은?", ["적극적으로 나선다 (E)", "천천히 적응한다 (I)"]),
    ("계획을 세울 때 당신은?", ["꼼꼼히 준비한다 (J)", "유연하게 움직인다 (P)"]),
    ("갈등이 생겼을 때 당신은?", ["감정을 솔직히 이야기한다 (F)", "논리적으로 해결한다 (T)"]),
    ("친구와의 모험 계획 중 당신은?", ["새로운 아이디어를 제안한다 (N)", "실현 가능한 계획을 제시한다 (S)"]),
    ("하루 일정을 어떻게 관리하나요?", ["시간표를 세우고 움직인다 (J)", "유동적으로 행동한다 (P)"]),
    ("문제 해결 방식은?", ["실용적인 방법을 선택한다 (S)", "창의적인 방법을 찾는다 (N)"]),
    ("주말에 시간이 생기면?", ["친구들과 어울린다 (E)", "혼자 시간을 보낸다 (I)"]),
    ("긴급 상황에서 당신은?", ["감정을 드러내며 공유한다 (F)", "침착하게 대처한다 (T)"]),
    ("약속 시간을?", ["반드시 지키려 한다 (J)", "상황에 맞춰 유동적으로 (P)"]),
    ("그룹 프로젝트에서 당신은?", ["리더 역할을 자처한다 (E)", "조용히 지원한다 (I)"]),
    ("낯선 장소에서 당신은?", ["적극적으로 탐험한다 (E)", "천천히 관찰한다 (I)"]),
    ("팀워크에서 당신은?", ["조화를 우선시한다 (F)", "결과에 집중한다 (T)"]),
    ("갑작스러운 계획 변경에 당신은?", ["유연하게 받아들인다 (P)", "다시 정비한다 (J)"]),
    ("모험 중 당신은?", ["새로운 길을 탐색한다 (N)", "안정적인 길을 선택한다 (S)"]),
    ("친구와의 의견 차이에 당신은?", ["감정을 표현하며 대화한다 (F)", "논리적으로 설명한다 (T)"]),
    ("혼자 있는 시간이 생기면?", ["외출하거나 사람들과 어울린다 (E)", "혼자만의 시간을 보낸다 (I)"]),
    ("어떤 일을 선택할 때 당신은?", ["실용적인 방법을 택한다 (S)", "새로운 시도를 한다 (N)"]),
    ("스트레스를 받을 때 당신은?", ["친구에게 털어놓는다 (F)", "혼자 해결한다 (T)"]),
    ("긴 하루 후 당신은?", ["사람들과 어울리며 회복한다 (E)", "혼자 시간을 보낸다 (I)"]),
    ("결과를 중요시하는 당신은?", ["과정도 중요하다 (F)", "결과 중심으로 행동한다 (T)"]),
]

# Streamlit 앱 시작
st.title("포켓몬 성향 테스트")
st.write("아래 질문에 답해 당신의 성향을 확인하세요!")

# 사용자 입력 저장
answers = []
for i, (question, options) in enumerate(questions):
    st.write(f"**{i+1}. {question}**")
    choice = st.radio("", options, key=i)
    answers.append(choice.split(" ")[-1])  # MBTI 코드만 저장

# 결과 계산
if st.button("결과 보기"):
    mbti = ""
    mbti += "E" if answers.count("E") > answers.count("I") else "I"
    mbti += "N" if answers.count("N") > answers.count("S") else "S"
    mbti += "F" if answers.count("F") > answers.count("T") else "T"
    mbti += "J" if answers.count("J") > answers.count("P") else "P"

    character = character_map.get(mbti.upper(), "알 수 없는 캐릭터")
    st.subheader(f"당신의 성향은: {character}!")
    st.write(f"MBTI 결과: {mbti}")
